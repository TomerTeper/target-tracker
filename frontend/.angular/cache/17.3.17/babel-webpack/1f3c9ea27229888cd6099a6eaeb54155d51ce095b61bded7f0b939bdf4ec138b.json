{"ast":null,"code":"import { signal, computed, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class TargetService {\n  constructor() {\n    this.targetsSignal = signal([]);\n    this.isConnectedSignal = signal(false);\n    this.targets = this.targetsSignal.asReadonly();\n    this.isConnected = this.isConnectedSignal.asReadonly();\n    this.targetCount = computed(() => this.targets().length);\n    this.apiUrl = 'http://localhost:8000';\n    this.wsUrl = 'ws://localhost:8000/ws';\n    this.http = inject(HttpClient);\n  }\n  getFilteredTargets(classification) {\n    return computed(() => {\n      const targets = this.targets();\n      if (!classification) return targets;\n      return targets.filter(target => target.classification === classification);\n    });\n  }\n  startWebSocketStream() {\n    this.stopWebSocketStream();\n    try {\n      this.wsConnection = new WebSocket(this.wsUrl);\n      this.wsConnection.onopen = () => {\n        this.isConnectedSignal.set(true);\n        console.log('WebSocket connected to backend');\n      };\n      this.wsConnection.onmessage = event => {\n        try {\n          const target = JSON.parse(event.data);\n          const currentTargets = this.targetsSignal();\n          const updatedTargets = [target, ...currentTargets].slice(0, 50);\n          this.targetsSignal.set(updatedTargets);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      this.wsConnection.onerror = error => {\n        console.error('WebSocket error:', error);\n        this.isConnectedSignal.set(false);\n      };\n      this.wsConnection.onclose = () => {\n        console.log('WebSocket connection closed');\n        this.isConnectedSignal.set(false);\n      };\n    } catch (error) {\n      console.error('Failed to connect to WebSocket:', error);\n      this.isConnectedSignal.set(false);\n    }\n  }\n  stopWebSocketStream() {\n    if (this.wsConnection) {\n      this.wsConnection.close();\n      this.wsConnection = undefined;\n    }\n    this.isConnectedSignal.set(false);\n  }\n  getTargets() {\n    return this.http.get(`${this.apiUrl}/targets`);\n  }\n  addTargets(targets) {\n    return this.http.post(`${this.apiUrl}/targets`, {\n      targets\n    });\n  }\n  clearTargets() {\n    this.targetsSignal.set([]);\n  }\n  static {\n    this.ɵfac = function TargetService_Factory(t) {\n      return new (t || TargetService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TargetService,\n      factory: TargetService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["signal","computed","inject","HttpClient","TargetService","constructor","targetsSignal","isConnectedSignal","targets","asReadonly","isConnected","targetCount","length","apiUrl","wsUrl","http","getFilteredTargets","classification","filter","target","startWebSocketStream","stopWebSocketStream","wsConnection","WebSocket","onopen","set","console","log","onmessage","event","JSON","parse","data","currentTargets","updatedTargets","slice","error","onerror","onclose","close","undefined","getTargets","get","addTargets","post","clearTargets","factory","ɵfac","providedIn"],"sources":["C:\\Users\\tomer\\Desktop\\mini-target-tracker\\frontend\\src\\app\\services\\target.service.ts"],"sourcesContent":["import { Injectable, signal, computed, effect, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Target } from '../models/target.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TargetService {\r\n\r\n  private targetsSignal = signal<Target[]>([]);\r\n  private isConnectedSignal = signal<boolean>(false);\r\n  private wsConnection?: WebSocket;\r\n\r\n  public targets = this.targetsSignal.asReadonly();\r\n  public isConnected = this.isConnectedSignal.asReadonly();\r\n  public targetCount = computed(() => this.targets().length);\r\n\r\n  public getFilteredTargets(classification?: 'hostile' | 'friendly') {\r\n    return computed(() => {\r\n      const targets = this.targets();\r\n      if (!classification) return targets;\r\n      return targets.filter(target => target.classification === classification);\r\n    });\r\n  }\r\n\r\n  private apiUrl = 'http://localhost:8000';\r\n  private wsUrl = 'ws://localhost:8000/ws';\r\n\r\n  private http = inject(HttpClient);\r\n\r\n  startWebSocketStream(): void {\r\n    this.stopWebSocketStream();\r\n    \r\n    try {\r\n      this.wsConnection = new WebSocket(this.wsUrl);\r\n      \r\n      this.wsConnection.onopen = () => {\r\n        this.isConnectedSignal.set(true);\r\n        console.log('WebSocket connected to backend');\r\n      };\r\n\r\n      this.wsConnection.onmessage = (event) => {\r\n        try {\r\n          const target = JSON.parse(event.data);\r\n          const currentTargets = this.targetsSignal();\r\n          const updatedTargets = [target, ...currentTargets].slice(0, 50);\r\n          this.targetsSignal.set(updatedTargets);\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.wsConnection.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.isConnectedSignal.set(false);\r\n      };\r\n\r\n      this.wsConnection.onclose = () => {\r\n        console.log('WebSocket connection closed');\r\n        this.isConnectedSignal.set(false);\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Failed to connect to WebSocket:', error);\r\n      this.isConnectedSignal.set(false);\r\n    }\r\n  }\r\n\r\n  stopWebSocketStream(): void {\r\n    if (this.wsConnection) {\r\n      this.wsConnection.close();\r\n      this.wsConnection = undefined;\r\n    }\r\n    this.isConnectedSignal.set(false);\r\n  }\r\n\r\n  getTargets(): Observable<{targets: Target[], count: number}> {\r\n    return this.http.get<{targets: Target[], count: number}>(`${this.apiUrl}/targets`);\r\n  }\r\n\r\n  addTargets(targets: Target[]): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/targets`, { targets });\r\n  }\r\n\r\n  clearTargets(): void {\r\n    this.targetsSignal.set([]);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}