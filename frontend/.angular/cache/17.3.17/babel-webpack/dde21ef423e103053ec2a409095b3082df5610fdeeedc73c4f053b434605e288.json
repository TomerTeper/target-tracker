{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { DashboardHeaderComponent } from './components/dashboard-header/dashboard-header.component';\nimport { StreamControlsComponent } from './components/stream-controls/stream-controls.component';\nimport { TargetListComponent } from './components/target-list/target-list.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/target.service\";\nexport class AppComponent {\n  constructor(targetService) {\n    this.targetService = targetService;\n    this.targets = [];\n    this.filteredTargets = [];\n    this.isConnected = false;\n    this.selectedClassification = '';\n    this.subscription = new Subscription();\n  }\n  ngOnInit() {\n    // Subscribe to targets stream\n    this.subscription.add(this.targetService.targets$.subscribe(targets => {\n      this.targets = targets;\n      this.applyFilter();\n    }));\n    // Subscribe to connection status\n    this.subscription.add(this.targetService.isConnected$.subscribe(connected => {\n      this.isConnected = connected;\n    }));\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  toggleStream() {\n    if (this.isConnected) {\n      this.targetService.stopSimulatedStream();\n    } else {\n      this.targetService.startSimulatedStream();\n    }\n  }\n  clearTargets() {\n    this.targetService.clearTargets();\n  }\n  onFilterChange() {\n    this.applyFilter();\n  }\n  applyFilter() {\n    if (!this.selectedClassification) {\n      this.filteredTargets = [...this.targets];\n    } else {\n      this.filteredTargets = this.targets.filter(target => target.classification === this.selectedClassification);\n    }\n  }\n  trackByTargetId(index, target) {\n    return target.id;\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.TargetService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 4,\n      vars: 4,\n      consts: [[1, \"dashboard\"], [3, \"isConnected\"], [3, \"toggleStream\", \"clearTargets\", \"filterChange\", \"isConnected\", \"selectedClassification\"], [3, \"targets\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"app-dashboard-header\", 1);\n          i0.ɵɵelementStart(2, \"app-stream-controls\", 2);\n          i0.ɵɵlistener(\"toggleStream\", function AppComponent_Template_app_stream_controls_toggleStream_2_listener() {\n            return ctx.toggleStream();\n          })(\"clearTargets\", function AppComponent_Template_app_stream_controls_clearTargets_2_listener() {\n            return ctx.clearTargets();\n          })(\"filterChange\", function AppComponent_Template_app_stream_controls_filterChange_2_listener($event) {\n            return ctx.onFilterChange($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"app-target-list\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"isConnected\", ctx.isConnected);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"isConnected\", ctx.isConnected)(\"selectedClassification\", ctx.selectedClassification);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"targets\", ctx.filteredTargets);\n        }\n      },\n      dependencies: [CommonModule, DashboardHeaderComponent, StreamControlsComponent, TargetListComponent],\n      styles: [\".dashboard[_ngcontent-%COMP%] {\\n      max-width: 1200px;\\n      margin: 0 auto;\\n      padding: 20px;\\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n    }\\n\\n    @media (max-width: 768px) {\\n      .dashboard[_ngcontent-%COMP%] {\\n        padding: 10px;\\n      }\\n    }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0lBQ0k7TUFDRSxpQkFBaUI7TUFDakIsY0FBYztNQUNkLGFBQWE7TUFDYiw0REFBNEQ7SUFDOUQ7O0lBRUE7TUFDRTtRQUNFLGFBQWE7TUFDZjtJQUNGIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgLmRhc2hib2FyZCB7XG4gICAgICBtYXgtd2lkdGg6IDEyMDBweDtcbiAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgcGFkZGluZzogMjBweDtcbiAgICAgIGZvbnQtZmFtaWx5OiAnU2Vnb2UgVUknLCBUYWhvbWEsIEdlbmV2YSwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcbiAgICB9XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgIC5kYXNoYm9hcmQge1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgfVxuICAgIH1cbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","Subscription","DashboardHeaderComponent","StreamControlsComponent","TargetListComponent","AppComponent","constructor","targetService","targets","filteredTargets","isConnected","selectedClassification","subscription","ngOnInit","add","targets$","subscribe","applyFilter","isConnected$","connected","ngOnDestroy","unsubscribe","toggleStream","stopSimulatedStream","startSimulatedStream","clearTargets","onFilterChange","filter","target","classification","trackByTargetId","index","id","i0","ɵɵdirectiveInject","i1","TargetService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵlistener","AppComponent_Template_app_stream_controls_toggleStream_2_listener","AppComponent_Template_app_stream_controls_clearTargets_2_listener","AppComponent_Template_app_stream_controls_filterChange_2_listener","$event","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","styles"],"sources":["C:\\Users\\tomer\\Desktop\\mini-target-tracker\\frontend\\src\\app\\app.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TargetService } from './services/target.service';\r\nimport { Target } from './models/target.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { DashboardHeaderComponent } from './components/dashboard-header/dashboard-header.component';\r\nimport { StreamControlsComponent } from './components/stream-controls/stream-controls.component';\r\nimport { TargetListComponent } from './components/target-list/target-list.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    DashboardHeaderComponent,\r\n    StreamControlsComponent,\r\n    TargetListComponent\r\n  ],\r\n  template: `\r\n    <div class=\"dashboard\">\r\n      <app-dashboard-header [isConnected]=\"isConnected\"></app-dashboard-header>\r\n      \r\n      <app-stream-controls \r\n        [isConnected]=\"isConnected\"\r\n        [selectedClassification]=\"selectedClassification\"\r\n        (toggleStream)=\"toggleStream()\"\r\n        (clearTargets)=\"clearTargets()\"\r\n        (filterChange)=\"onFilterChange($event)\">\r\n      </app-stream-controls>\r\n      \r\n      <app-target-list [targets]=\"filteredTargets\"></app-target-list>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .dashboard {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 20px;\r\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n      .dashboard {\r\n        padding: 10px;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  targets: Target[] = [];\r\n  filteredTargets: Target[] = [];\r\n  isConnected = false;\r\n  selectedClassification: '' | 'hostile' | 'friendly' = '';\r\n  \r\n  private subscription = new Subscription();\r\n\r\n  constructor(private targetService: TargetService) {}\r\n\r\n  ngOnInit() {\r\n    // Subscribe to targets stream\r\n    this.subscription.add(\r\n      this.targetService.targets$.subscribe(targets => {\r\n        this.targets = targets;\r\n        this.applyFilter();\r\n      })\r\n    );\r\n\r\n    // Subscribe to connection status\r\n    this.subscription.add(\r\n      this.targetService.isConnected$.subscribe(connected => {\r\n        this.isConnected = connected;\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleStream() {\r\n    if (this.isConnected) {\r\n      this.targetService.stopSimulatedStream();\r\n    } else {\r\n      this.targetService.startSimulatedStream();\r\n    }\r\n  }\r\n\r\n  clearTargets() {\r\n    this.targetService.clearTargets();\r\n  }\r\n\r\n  onFilterChange() {\r\n    this.applyFilter();\r\n  }\r\n\r\n  private applyFilter() {\r\n    if (!this.selectedClassification) {\r\n      this.filteredTargets = [...this.targets];\r\n    } else {\r\n      this.filteredTargets = this.targets.filter(\r\n        target => target.classification === this.selectedClassification\r\n      );\r\n    }\r\n  }\r\n\r\n  trackByTargetId(index: number, target: Target): string {\r\n    return target.id;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}