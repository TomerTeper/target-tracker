{"ast":null,"code":"import { signal, computed } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TargetService {\n  // Filtered targets computed signal\n  getFilteredTargets(classification) {\n    return computed(() => {\n      const targets = this.targets();\n      if (!classification) return targets;\n      return targets.filter(target => target.classification === classification);\n    });\n  }\n  constructor(http) {\n    this.http = http;\n    // Signals\n    this.targetsSignal = signal([]);\n    this.isConnectedSignal = signal(false);\n    // Computed signals\n    this.targets = this.targetsSignal.asReadonly();\n    this.isConnected = this.isConnectedSignal.asReadonly();\n    this.targetCount = computed(() => this.targets().length);\n    this.apiUrl = 'http://localhost:8000';\n    this.wsUrl = 'ws://localhost:8000/ws';\n  }\n  // Simulate WebSocket stream using interval\n  startSimulatedStream() {\n    // Stop any existing stream first\n    this.stopSimulatedStream();\n    this.isConnectedSignal.set(true);\n    this.streamInterval = setInterval(() => {\n      const target = this.generateRandomTarget();\n      const currentTargets = this.targetsSignal();\n      const updatedTargets = [target, ...currentTargets].slice(0, 50); // Keep last 50 targets\n      this.targetsSignal.set(updatedTargets);\n    }, 1000);\n  }\n  stopSimulatedStream() {\n    if (this.streamInterval) {\n      clearInterval(this.streamInterval);\n      this.streamInterval = undefined;\n    }\n    this.isConnectedSignal.set(false);\n  }\n  // REST API methods\n  getTargets() {\n    return this.http.get(`${this.apiUrl}/targets`);\n  }\n  addTargets(targets) {\n    return this.http.post(`${this.apiUrl}/targets`, {\n      targets\n    });\n  }\n  // Generate random target for simulation\n  generateRandomTarget() {\n    const classifications = ['hostile', 'friendly'];\n    const names = ['Alpha', 'Bravo', 'Charlie', 'Delta', 'Echo', 'Foxtrot', 'Golf', 'Hotel'];\n    return {\n      id: Math.random().toString(36).substr(2, 9),\n      name: `${names[Math.floor(Math.random() * names.length)]}-${Math.floor(Math.random() * 1000)}`,\n      heading: Math.floor(Math.random() * 360),\n      timestamp: new Date().toISOString(),\n      classification: classifications[Math.floor(Math.random() * classifications.length)]\n    };\n  }\n  // Clear all targets\n  clearTargets() {\n    this.targetsSignal.set([]);\n  }\n  static {\n    this.ɵfac = function TargetService_Factory(t) {\n      return new (t || TargetService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TargetService,\n      factory: TargetService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["signal","computed","TargetService","getFilteredTargets","classification","targets","filter","target","constructor","http","targetsSignal","isConnectedSignal","asReadonly","isConnected","targetCount","length","apiUrl","wsUrl","startSimulatedStream","stopSimulatedStream","set","streamInterval","setInterval","generateRandomTarget","currentTargets","updatedTargets","slice","clearInterval","undefined","getTargets","get","addTargets","post","classifications","names","id","Math","random","toString","substr","name","floor","heading","timestamp","Date","toISOString","clearTargets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\tomer\\Desktop\\mini-target-tracker\\frontend\\src\\app\\services\\target.service.ts"],"sourcesContent":["import { Injectable, signal, computed, effect } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { interval, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Target } from '../models/target.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TargetService {\r\n  // Signals\r\n  private targetsSignal = signal<Target[]>([]);\r\n  private isConnectedSignal = signal<boolean>(false);\r\n  private streamInterval?: any;\r\n\r\n  // Computed signals\r\n  public targets = this.targetsSignal.asReadonly();\r\n  public isConnected = this.isConnectedSignal.asReadonly();\r\n  public targetCount = computed(() => this.targets().length);\r\n\r\n  // Filtered targets computed signal\r\n  public getFilteredTargets(classification?: 'hostile' | 'friendly') {\r\n    return computed(() => {\r\n      const targets = this.targets();\r\n      if (!classification) return targets;\r\n      return targets.filter(target => target.classification === classification);\r\n    });\r\n  }\r\n\r\n  private apiUrl = 'http://localhost:8000';\r\n  private wsUrl = 'ws://localhost:8000/ws';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Simulate WebSocket stream using interval\r\n  startSimulatedStream(): void {\r\n    // Stop any existing stream first\r\n    this.stopSimulatedStream();\r\n    \r\n    this.isConnectedSignal.set(true);\r\n    \r\n    this.streamInterval = setInterval(() => {\r\n      const target = this.generateRandomTarget();\r\n      const currentTargets = this.targetsSignal();\r\n      const updatedTargets = [target, ...currentTargets].slice(0, 50); // Keep last 50 targets\r\n      this.targetsSignal.set(updatedTargets);\r\n    }, 1000);\r\n  }\r\n\r\n  stopSimulatedStream(): void {\r\n    if (this.streamInterval) {\r\n      clearInterval(this.streamInterval);\r\n      this.streamInterval = undefined;\r\n    }\r\n    this.isConnectedSignal.set(false);\r\n  }\r\n\r\n  // REST API methods\r\n  getTargets(): Observable<{targets: Target[], count: number}> {\r\n    return this.http.get<{targets: Target[], count: number}>(`${this.apiUrl}/targets`);\r\n  }\r\n\r\n  addTargets(targets: Target[]): Observable<any> {\r\n    return this.http.post(`${this.apiUrl}/targets`, { targets });\r\n  }\r\n\r\n  // Generate random target for simulation\r\n  private generateRandomTarget(): Target {\r\n    const classifications: ('hostile' | 'friendly')[] = ['hostile', 'friendly'];\r\n    const names = ['Alpha', 'Bravo', 'Charlie', 'Delta', 'Echo', 'Foxtrot', 'Golf', 'Hotel'];\r\n    \r\n    return {\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      name: `${names[Math.floor(Math.random() * names.length)]}-${Math.floor(Math.random() * 1000)}`,\r\n      heading: Math.floor(Math.random() * 360),\r\n      timestamp: new Date().toISOString(),\r\n      classification: classifications[Math.floor(Math.random() * classifications.length)]\r\n    };\r\n  }\r\n\r\n  // Clear all targets\r\n  clearTargets(): void {\r\n    this.targetsSignal.set([]);\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}