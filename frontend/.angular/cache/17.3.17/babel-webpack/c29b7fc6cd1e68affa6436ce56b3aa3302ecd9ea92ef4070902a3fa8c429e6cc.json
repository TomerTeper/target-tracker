{"ast":null,"code":"import { computed, signal } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DashboardHeaderComponent } from './components/dashboard-header/dashboard-header.component';\nimport { StreamControlsComponent } from './components/stream-controls/stream-controls.component';\nimport { TargetListComponent } from './components/target-list/target-list.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/target.service\";\nexport class AppComponent {\n  constructor(targetService) {\n    this.targetService = targetService;\n    // Signals\n    this.selectedClassification = signal('');\n    // Computed signals\n    this.isConnected = this.targetService.isConnected;\n    this.targets = this.targetService.targets;\n    this.filteredTargets = computed(() => {\n      const targets = this.targets();\n      const classification = this.selectedClassification();\n      if (!classification) return targets;\n      return targets.filter(target => target.classification === classification);\n    });\n  }\n  toggleStream() {\n    if (this.isConnected()) {\n      this.targetService.stopWebSocketStream();\n    } else {\n      this.targetService.startWebSocketStream();\n    }\n  }\n  clearTargets() {\n    this.targetService.clearTargets();\n  }\n  onFilterChange(classification) {\n    this.selectedClassification.set(classification);\n  }\n  trackByTargetId(index, target) {\n    return target.id;\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.TargetService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 4,\n      vars: 4,\n      consts: [[1, \"dashboard\"], [3, \"isConnected\"], [3, \"toggleStream\", \"clearTargets\", \"filterChange\", \"isConnected\", \"selectedClassification\"], [3, \"targets\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵelement(1, \"app-dashboard-header\", 1);\n          i0.ɵɵelementStart(2, \"app-stream-controls\", 2);\n          i0.ɵɵlistener(\"toggleStream\", function AppComponent_Template_app_stream_controls_toggleStream_2_listener() {\n            return ctx.toggleStream();\n          })(\"clearTargets\", function AppComponent_Template_app_stream_controls_clearTargets_2_listener() {\n            return ctx.clearTargets();\n          })(\"filterChange\", function AppComponent_Template_app_stream_controls_filterChange_2_listener($event) {\n            return ctx.onFilterChange($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"app-target-list\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"isConnected\", ctx.isConnected());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"isConnected\", ctx.isConnected())(\"selectedClassification\", ctx.selectedClassification());\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"targets\", ctx.filteredTargets());\n        }\n      },\n      dependencies: [CommonModule, DashboardHeaderComponent, StreamControlsComponent, TargetListComponent],\n      styles: [\".dashboard[_ngcontent-%COMP%] {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n  padding: 20px;\\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\\n}\\n\\n@media (max-width: 768px) {\\n  .dashboard[_ngcontent-%COMP%] {\\n    padding: 10px;\\n  }\\n} \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxpQkFBaUI7RUFDakIsY0FBYztFQUNkLGFBQWE7RUFDYiw0REFBNEQ7QUFDOUQ7O0FBRUE7RUFDRTtJQUNFLGFBQWE7RUFDZjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLmRhc2hib2FyZCB7XHJcbiAgbWF4LXdpZHRoOiAxMjAwcHg7XHJcbiAgbWFyZ2luOiAwIGF1dG87XHJcbiAgcGFkZGluZzogMjBweDtcclxuICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgVGFob21hLCBHZW5ldmEsIFZlcmRhbmEsIHNhbnMtc2VyaWY7XHJcbn1cclxuXHJcbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gIC5kYXNoYm9hcmQge1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICB9XHJcbn0gIl0sInNvdXJjZVJvb3QiOiIifQ== */\"],\n      changeDetection: 0\n    });\n  }\n}","map":{"version":3,"names":["computed","signal","CommonModule","DashboardHeaderComponent","StreamControlsComponent","TargetListComponent","AppComponent","constructor","targetService","selectedClassification","isConnected","targets","filteredTargets","classification","filter","target","toggleStream","stopWebSocketStream","startWebSocketStream","clearTargets","onFilterChange","set","trackByTargetId","index","id","i0","ɵɵdirectiveInject","i1","TargetService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵlistener","AppComponent_Template_app_stream_controls_toggleStream_2_listener","AppComponent_Template_app_stream_controls_clearTargets_2_listener","AppComponent_Template_app_stream_controls_filterChange_2_listener","$event","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","styles","changeDetection"],"sources":["C:\\Users\\tomer\\Desktop\\mini-target-tracker\\frontend\\src\\app\\app.component.ts","C:\\Users\\tomer\\Desktop\\mini-target-tracker\\frontend\\src\\app\\app.component.html"],"sourcesContent":["import { Component, computed, signal, ChangeDetectionStrategy } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TargetService } from './services/target.service';\r\nimport { Target } from './models/target.model';\r\nimport { DashboardHeaderComponent } from './components/dashboard-header/dashboard-header.component';\r\nimport { StreamControlsComponent } from './components/stream-controls/stream-controls.component';\r\nimport { TargetListComponent } from './components/target-list/target-list.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, \r\n    DashboardHeaderComponent,\r\n    StreamControlsComponent,\r\n    TargetListComponent\r\n  ],\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AppComponent {\r\n  // Signals\r\n  selectedClassification = signal<'' | 'hostile' | 'friendly'>('');\r\n\r\n  // Computed signals\r\n  isConnected = this.targetService.isConnected;\r\n  targets = this.targetService.targets;\r\n  \r\n  \r\n  filteredTargets = computed(() => {\r\n    const targets = this.targets();\r\n    const classification = this.selectedClassification();\r\n    \r\n    if (!classification) return targets;\r\n    return targets.filter(target => target.classification === classification);\r\n  });\r\n\r\n  constructor(private targetService: TargetService) {}\r\n\r\n  toggleStream() {\r\n    if (this.isConnected()) {\r\n      this.targetService.stopWebSocketStream();\r\n    } else {\r\n      this.targetService.startWebSocketStream();\r\n    }\r\n  }\r\n\r\n  clearTargets() {\r\n    this.targetService.clearTargets();\r\n  }\r\n\r\n  onFilterChange(classification: 'hostile' | 'friendly' | '') {\r\n    this.selectedClassification.set(classification);\r\n  }\r\n\r\n  trackByTargetId(index: number, target: Target): string {\r\n    return target.id;\r\n  }\r\n} ","<div class=\"dashboard\">\r\n  <app-dashboard-header [isConnected]=\"isConnected()\"></app-dashboard-header>\r\n  \r\n  <app-stream-controls \r\n    [isConnected]=\"isConnected()\"\r\n    [selectedClassification]=\"selectedClassification()\"\r\n    (toggleStream)=\"toggleStream()\"\r\n    (clearTargets)=\"clearTargets()\"\r\n    (filterChange)=\"onFilterChange($event)\">\r\n  </app-stream-controls>\r\n  \r\n  <app-target-list [targets]=\"filteredTargets()\"></app-target-list>\r\n</div> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}